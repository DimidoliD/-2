const { App } = require('@slack/bolt');
const express = require('express');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const expressApp = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bolt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new App({
  token: process.env.TELEGRAM_BOT_TOKEN,
  signingSecret: process.env.TELEGRAM_BOT_TOKEN, // –î–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ signing secret
  socketMode: false, // –û—Ç–∫–ª—é—á–∞–µ–º socket mode –¥–ª—è Telegram
  processBeforeResponse: true
});

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
expressApp.use(express.json());

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–¥–∞—á
let todos = [];
let userIds = new Set();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
app.command('/start', async ({ command, ack, respond }) => {
  await ack();
  
  const userId = command.user_id;
  userIds.add(userId);
  
  await respond({
    text: `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
    /add <–∑–∞–¥–∞—á–∞> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
    /done <–Ω–æ–º–µ—Ä> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    /delete <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É`,
    response_type: 'in_channel'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
app.command('/help', async ({ command, ack, respond }) => {
  await ack();
  
  await respond({
    text: `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /add <–∑–∞–¥–∞—á–∞> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏
    /done <–Ω–æ–º–µ—Ä> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    /delete <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`,
    response_type: 'in_channel'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
app.command('/add', async ({ command, ack, respond }) => {
  await ack();
  
  const userId = command.user_id;
  const taskText = command.text;
  
  if (!taskText) {
    await respond({
      text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É. –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ',
      response_type: 'in_channel'
    });
    return;
  }
  
  const newTask = {
    id: Date.now(),
    userId: userId,
    text: taskText,
    completed: false,
    createdAt: new Date().toISOString()
  };
  
  todos.push(newTask);
  
  await respond({
    text: `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: "${taskText}"`,
    response_type: 'in_channel'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
app.command('/list', async ({ command, ack, respond }) => {
  await ack();
  
  const userId = command.user_id;
  const userTodos = todos.filter(todo => todo.userId === userId);
  
  if (userTodos.length === 0) {
    await respond({
      text: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /add',
      response_type: 'in_channel'
    });
    return;
  }
  
  let message = 'üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n';
  userTodos.forEach((todo, index) => {
    const status = todo.completed ? '‚úÖ' : '‚è≥';
    message += `${index + 1}. ${status} ${todo.text}\n`;
  });
  
  await respond({
    text: message,
    response_type: 'in_channel'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done
app.command('/done', async ({ command, ack, respond }) => {
  await ack();
  
  const userId = command.user_id;
  const taskNumber = parseInt(command.text);
  
  if (isNaN(taskNumber)) {
    await respond({
      text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /done 1',
      response_type: 'in_channel'
    });
    return;
  }
  
  const userTodos = todos.filter(todo => todo.userId === userId);
  const taskIndex = taskNumber - 1;
  
  if (taskIndex < 0 || taskIndex >= userTodos.length) {
    await respond({
      text: '–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.',
      response_type: 'in_channel'
    });
    return;
  }
  
  const task = userTodos[taskIndex];
  const globalTaskIndex = todos.findIndex(t => t.id === task.id);
  
  if (globalTaskIndex !== -1) {
    todos[globalTaskIndex].completed = true;
    await respond({
      text: `‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: "${task.text}"`,
      response_type: 'in_channel'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
app.command('/delete', async ({ command, ack, respond }) => {
  await ack();
  
  const userId = command.user_id;
  const taskNumber = parseInt(command.text);
  
  if (isNaN(taskNumber)) {
    await respond({
      text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /delete 1',
      response_type: 'in_channel'
    });
    return;
  }
  
  const userTodos = todos.filter(todo => todo.userId === userId);
  const taskIndex = taskNumber - 1;
  
  if (taskIndex < 0 || taskIndex >= userTodos.length) {
    await respond({
      text: '–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.',
      response_type: 'in_channel'
    });
    return;
  }
  
  const task = userTodos[taskIndex];
  const globalTaskIndex = todos.findIndex(t => t.id === task.id);
  
  if (globalTaskIndex !== -1) {
    todos.splice(globalTaskIndex, 1);
    await respond({
      text: `üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: "${task.text}"`,
      response_type: 'in_channel'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
app.command(/.*/, async ({ command, ack, respond }) => {
  await ack();
  
  await respond({
    text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
    response_type: 'in_channel'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram webhook
expressApp.post('/slack/events', async (req, res) => {
  try {
    await app.processEvent(req.body);
    res.status(200).send('OK');
  } catch (error) {
    console.error('Error processing event:', error);
    res.status(500).send('Error');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram webhook (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)
expressApp.post('/webhook', async (req, res) => {
  try {
    await app.processEvent(req.body);
    res.status(200).send('OK');
  } catch (error) {
    console.error('Error processing webhook:', error);
    res.status(500).send('Error');
  }
});

// Health check endpoint
expressApp.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    todosCount: todos.length,
    usersCount: userIds.size
  });
});

// Root endpoint
expressApp.get('/', (req, res) => {
  res.json({ 
    message: 'ToDo Telegram Bot is running!',
    bot: '@ToDoYaBot',
    endpoints: {
      health: '/health',
      webhook: '/webhook',
      slack_events: '/slack/events'
    }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
(async () => {
  try {
    await app.start();
    console.log('‚ö°Ô∏è Bolt app is running!');
    
    expressApp.listen(PORT, () => {
      console.log(`üöÄ Server is running on port ${PORT}`);
      console.log(`üì± Bot: @ToDoYaBot`);
      console.log(`üîó Health check: http://localhost:${PORT}/health`);
    });
  } catch (error) {
    console.error('Failed to start the app:', error);
    process.exit(1);
  }
})();

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully');
  await app.stop();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('SIGINT received, shutting down gracefully');
  await app.stop();
  process.exit(0);
});
