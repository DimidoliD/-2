const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const axios = require('axios');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors({
  origin: [
    'https://yavibetodo-telegram-539l.bolt.host',
    'http://localhost:3000',
    'http://localhost:3001'
  ],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–¥–∞—á
let todos = [];
let users = new Map();

// Telegram Bot API
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_API_URL = TELEGRAM_BOT_TOKEN ? `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}` : null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(chatId, text, options = {}) {
  try {
    if (!TELEGRAM_BOT_TOKEN) {
      console.log('TELEGRAM_BOT_TOKEN is not set, skipping message send');
      return null;
    }
    
    const response = await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      ...options
    });
    return response.data;
  } catch (error) {
    console.error('Error sending Telegram message:', error.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram WebApp –¥–∞–Ω–Ω—ã—Ö
function validateTelegramWebAppData(initData) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
  // –î–ª—è –¥–µ–º–æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
  try {
    const urlParams = new URLSearchParams(initData);
    const user = JSON.parse(urlParams.get('user') || '{}');
    return user;
  } catch (error) {
    console.error('Error validating Telegram data:', error);
    return null;
  }
}

// ===== API ENDPOINTS –î–õ–Ø –ú–ò–ù–ò-–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/todos', (req, res) => {
  try {
    const { userId } = req.query;
    
    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    const userTodos = todos.filter(todo => todo.userId === userId);
    res.json({
      success: true,
      data: userTodos
    });
  } catch (error) {
    console.error('Error getting todos:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
app.post('/api/todos', (req, res) => {
  try {
    const { userId, text, initData } = req.body;
    
    if (!userId || !text) {
      return res.status(400).json({ error: 'User ID and text are required' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram WebApp –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (initData) {
      const user = validateTelegramWebAppData(initData);
      if (!user) {
        return res.status(401).json({ error: 'Invalid Telegram data' });
      }
    }

    const newTodo = {
      id: Date.now(),
      userId: userId,
      text: text,
      completed: false,
      createdAt: new Date().toISOString()
    };

    todos.push(newTodo);
    
    res.json({
      success: true,
      data: newTodo
    });
  } catch (error) {
    console.error('Error creating todo:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
app.put('/api/todos/:id', (req, res) => {
  try {
    const { id } = req.params;
    const { userId, text, completed } = req.body;
    
    const todoIndex = todos.findIndex(todo => todo.id === parseInt(id) && todo.userId === userId);
    
    if (todoIndex === -1) {
      return res.status(404).json({ error: 'Todo not found' });
    }

    if (text !== undefined) todos[todoIndex].text = text;
    if (completed !== undefined) todos[todoIndex].completed = completed;
    todos[todoIndex].updatedAt = new Date().toISOString();

    res.json({
      success: true,
      data: todos[todoIndex]
    });
  } catch (error) {
    console.error('Error updating todo:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
app.delete('/api/todos/:id', (req, res) => {
  try {
    const { id } = req.params;
    const { userId } = req.query;
    
    const todoIndex = todos.findIndex(todo => todo.id === parseInt(id) && todo.userId === userId);
    
    if (todoIndex === -1) {
      return res.status(404).json({ error: 'Todo not found' });
    }

    const deletedTodo = todos.splice(todoIndex, 1)[0];
    
    res.json({
      success: true,
      data: deletedTodo
    });
  } catch (error) {
    console.error('Error deleting todo:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// ===== TELEGRAM BOT COMMANDS =====

// Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    console.log('Received update:', JSON.stringify(update, null, 2));

    if (update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text;
      const userId = update.message.from.id.toString();

      console.log(`Processing message from user ${userId}: ${text}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      users.set(userId, {
        id: userId,
        username: update.message.from.username,
        firstName: update.message.from.first_name,
        lastName: update.message.from.last_name
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤ –≤ Telegram
      if (text === '/start') {
        console.log('Processing /start command');
        await sendTelegramMessage(chatId, 
          `–ü—Ä–∏–≤–µ—Ç! üëã\n\n` +
          `–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/add <–∑–∞–¥–∞—á–∞> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n` +
          `/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏\n` +
          `/done <–Ω–æ–º–µ—Ä> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n` +
          `/delete <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n` +
          `/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n` +
          `–ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!`
        );
      } else if (text === '/help') {
        console.log('Processing /help command');
        await sendTelegramMessage(chatId, 
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
          `/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
          `/add <–∑–∞–¥–∞—á–∞> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n` +
          `/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n` +
          `/done <–Ω–æ–º–µ—Ä> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n` +
          `/delete <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n` +
          `/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`
        );
      } else if (text.startsWith('/add ')) {
        const taskText = text.substring(5);
        if (!taskText) {
          await sendTelegramMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É. –ü—Ä–∏–º–µ—Ä: /add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ');
          return;
        }

        const newTodo = {
          id: Date.now(),
          userId: userId,
          text: taskText,
          completed: false,
          createdAt: new Date().toISOString()
        };

        todos.push(newTodo);
        await sendTelegramMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: "${taskText}"`);
      } else if (text === '/list') {
        const userTodos = todos.filter(todo => todo.userId === userId);
        
        if (userTodos.length === 0) {
          await sendTelegramMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å –ø–æ–º–æ—â—å—é /add');
          return;
        }

        let message = 'üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n';
        userTodos.forEach((todo, index) => {
          const status = todo.completed ? '‚úÖ' : '‚è≥';
          message += `${index + 1}. ${status} ${todo.text}\n`;
        });

        await sendTelegramMessage(chatId, message);
      } else if (text.startsWith('/done ')) {
        const taskNumber = parseInt(text.substring(6));
        const userTodos = todos.filter(todo => todo.userId === userId);
        const taskIndex = taskNumber - 1;

        if (isNaN(taskNumber) || taskIndex < 0 || taskIndex >= userTodos.length) {
          await sendTelegramMessage(chatId, '–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.');
          return;
        }

        const task = userTodos[taskIndex];
        const globalTaskIndex = todos.findIndex(t => t.id === task.id);
        
        if (globalTaskIndex !== -1) {
          todos[globalTaskIndex].completed = true;
          await sendTelegramMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: "${task.text}"`);
        }
      } else if (text.startsWith('/delete ')) {
        const taskNumber = parseInt(text.substring(8));
        const userTodos = todos.filter(todo => todo.userId === userId);
        const taskIndex = taskNumber - 1;

        if (isNaN(taskNumber) || taskIndex < 0 || taskIndex >= userTodos.length) {
          await sendTelegramMessage(chatId, '–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.');
          return;
        }

        const task = userTodos[taskIndex];
        const globalTaskIndex = todos.findIndex(t => t.id === task.id);
        
        if (globalTaskIndex !== -1) {
          todos.splice(globalTaskIndex, 1);
          await sendTelegramMessage(chatId, `üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: "${task.text}"`);
        }
      } else {
        await sendTelegramMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
      }
    }

    res.status(200).send('OK');
  } catch (error) {
    console.error('Error processing webhook:', error);
    console.error('Error stack:', error.stack);
    res.status(500).json({ error: 'Internal server error', message: error.message });
  }
});

// ===== UTILITY ENDPOINTS =====

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    todosCount: todos.length,
    usersCount: users.size,
    uptime: process.uptime()
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'ToDo Telegram Bot API is running!',
    bot: '@ToDoYaBot',
    version: '1.0.0',
    endpoints: {
      health: '/health',
      webhook: '/webhook',
      api: {
        todos: '/api/todos',
        createTodo: 'POST /api/todos',
        updateTodo: 'PUT /api/todos/:id',
        deleteTodo: 'DELETE /api/todos/:id'
      }
    }
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

// Error handler
app.use((error, req, res, next) => {
  console.error('Unhandled error:', error);
  res.status(500).json({ error: 'Internal server error' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Server is running on port ${PORT}`);
  console.log(`üì± Bot: @ToDoYaBot`);
  console.log(`üîó Health check: http://localhost:${PORT}/health`);
  console.log(`üì° Webhook: http://localhost:${PORT}/webhook`);
  console.log(`üåê API: http://localhost:${PORT}/api/todos`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  process.exit(0);
});